{
	"info": {
		"_postman_id": "f34a1a22-da56-4613-8fe9-e535470c80b0",
		"name": "Test-LIBRARY-MANAGEMENT-SYSTEM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23503477"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Invalid Cases",
					"item": [
						{
							"name": "get by id - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by query - invalid query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}?year=this is an invalid year&isbn=123",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "title",
											"value": "some title",
											"disabled": true
										},
										{
											"key": "year",
											"value": "this is an invalid year"
										},
										{
											"key": "isbn",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.collectionVariables.set (\"randomISBN\", _.random (1000000000,));",
											"pm.collectionVariables.set (\"randomYear\", _.random (1600,2023));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isbn\": \"927\",\n    \"author\": {{randomYear}},\n    \"publicationYear\": \"{{$randomPhrase}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.collectionVariables.set (\"randomISBN\", _.random (1000000000,));",
											"pm.collectionVariables.set (\"randomYear\", _.random (1600,2023));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isbn\": \"927\",\n    \"author\": {{randomYear}},\n    \"publicationYear\": \"{{$randomPhrase}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomYear\", pm.collectionVariables.get(\"randomYear\") + 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publicationYear\": {{randomYear}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Found Cases",
					"item": [
						{
							"name": "delete - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "update - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get all - empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const books = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no books yet\", () => {",
									"    pm.expect(books).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const BASE_URL = pm.collectionVariables.get(\"base_url\");\r",
									"const deleteAll = async (path, after = () => {}) => {\r",
									"    const url = `${BASE_URL}${path}`\r",
									"    pm.sendRequest(url, (error, response) => {\r",
									"    if (error) return console.log(error)\r",
									"    const body = response.json().data;\r",
									"    const {length} = body;\r",
									"    if (length === 0) return after();\r",
									"    let count = 0;\r",
									"    body.forEach(async item => \r",
									"        pm.sendRequest({\r",
									"        url: `${url}/${item.id}`,\r",
									"        method: 'DELETE',\r",
									"        headers: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }}, (error) => {\r",
									"            if (error) return console.log(error)\r",
									"            console.log(\"deleted \" + item.id)\r",
									"            count++;\r",
									"            if (count === length) after();\r",
									"        }))})};\r",
									"\r",
									"deleteAll(\"/transactions\", () => deleteAll(\"/exemplars\", () => deleteAll(\"/\" + pm.collectionVariables.get(\"table\"))));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"bookId\", body.id);",
									"pm.collectionVariables.set(\"lastId\", body.id);",
									"",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.collectionVariables.set (\"randomISBN\", _.random (1000000000,));",
									"pm.collectionVariables.set (\"randomYear\", _.random (1600,2023));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isbn\": \"927{{$timestamp}}\",\n    \"title\": \"{{$randomPhrase}}\",\n    \"author\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"publicationYear\": {{randomYear}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const bookId = pm.collectionVariables.get(\"bookId\");\r",
									"\r",
									"pm.test(\"should receive a book with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", bookId);\r",
									"}) ;\r",
									"\r",
									"const randomYear = pm.collectionVariables.get(\"randomYear\");\r",
									"\r",
									"pm.test(\"should receive a book correct year\", () => {\r",
									"    pm.expect(body).to.have.property(\"publicationYear\", randomYear);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const books = JSON.parse(responseBody).data;",
									"const bookId = pm.collectionVariables.get(\"bookId\");",
									"const book = books[0];",
									"",
									"pm.test(\"should receive a book with expected id\", () => {",
									"    ",
									"    pm.expect(book).to.have.property(\"id\", bookId);",
									"}) ;",
									"",
									"const randomYear = pm.collectionVariables.get(\"randomYear\");",
									"",
									"pm.test(\"should receive a book correct year\", () => {",
									"    pm.expect(book).to.have.property(\"publicationYear\", randomYear);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?publicationYear={{randomYear}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "title",
									"value": "some title",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "publicationYear",
									"value": "{{randomYear}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const books = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have only 1 book\", () => {",
									"    pm.expect(books).to.have.length(1, \"expected length 1\");",
									"})",
									"",
									"pm.test(\"should have 1 book with expected id\", () => {",
									"    const book = books[0];",
									"    pm.expect(book.id).to.eql(pm.collectionVariables.get(\"bookId\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "publicationYear",
									"value": "1800",
									"disabled": true
								},
								{
									"key": "title",
									"value": "some title",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "isbn",
									"value": "123412341234",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update - first",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"randomYear\", pm.collectionVariables.get(\"randomYear\") + 10);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = JSON.parse(responseBody).data[0];\r",
									"const reqBody = JSON.parse(pm.request.body.raw);\r",
									"const id = pm.collectionVariables.get(\"bookId\");\r",
									"\r",
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"should have expected id\", () => {\r",
									"    const resId = resBody.id;\r",
									"    pm.expect(+resId).to.equal(+id);\r",
									"})\r",
									"\r",
									"const randomYear = pm.collectionVariables.get(\"randomYear\");\r",
									"\r",
									"pm.test(\"should have changed as expected\", () => {\r",
									"    const resBodyWithId = {...resBody, id};\r",
									"    pm.expect(resBodyWithId).not.to.equal(reqBody);\r",
									"    pm.expect(resBody.publicationYear).to.eql(randomYear)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicationYear\": {{randomYear}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const bookId = pm.collectionVariables.get(\"bookId\");\r",
									"\r",
									"pm.test(\"should receive a book with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", bookId);\r",
									"}) ;\r",
									"\r",
									"const randomYear = pm.collectionVariables.get(\"randomYear\");\r",
									"\r",
									"pm.test(\"should receive a book correct year\", () => {\r",
									"    pm.expect(body).to.have.property(\"publicationYear\", randomYear);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should not be ok\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - empty Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const books = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no books yet\", () => {",
									"    pm.expect(books).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "publicationYear",
									"value": "1800",
									"disabled": true
								},
								{
									"key": "title",
									"value": "some title",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "isbn",
									"value": "123412341234",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create -random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set (\"randomYear\", _.random (1600,2023));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isbn\": \"921{{$timestamp}}\",\n    \"title\": \"{{$randomPhrase}}\",\n    \"author\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"publicationYear\": {{randomYear}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set (\"randomYear\", _.random (1600,2023));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isbn\": \"922{{$timestamp}}\",\n    \"title\": \"same title\",\n    \"author\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"publicationYear\": {{randomYear}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same title 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})",
									"",
									"pm.collectionVariables.set(\"bookId\", body.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set (\"randomYear\", _.random (1600,2023));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isbn\": \"923{{$timestamp}}\",\n    \"title\": \"same title\",\n    \"author\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"publicationYear\": {{randomYear}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all  - many",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const books = body.data;",
									"const {total} = body;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have 3 books\", () => {",
									"    pm.expect(books).to.have.length(3, \"expected length 3\");",
									"    pm.expect(total).to.eql(3);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "publicationYear",
									"value": "1800",
									"disabled": true
								},
								{
									"key": "title",
									"value": "some title",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "isbn",
									"value": "123412341234",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - same title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const books = JSON.parse(responseBody).data;",
									"const bookId = pm.collectionVariables.get(\"bookId\");",
									"",
									"pm.test(\"should have length 2\", () => {",
									"    pm.expect(books).to.have.length(2);",
									"}) ;",
									"",
									"pm.test(\"should receive a book correct year\", () => {",
									"    books.forEach(book => {",
									"pm.environment.get(\"variable_key\");",
									"        pm.expect(book).to.have.property(\"title\", \"same title\");",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?title=same title",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "title",
									"value": "same title"
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "year",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"table\", \"books\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Borrowers",
			"item": [
				{
					"name": "Invalid Cases",
					"item": [
						{
							"name": "get by id - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by query - invalid query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}?firstName=a really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 chars&lastName&email=not an email",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "firstName",
											"value": "a really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 charsa really long first name that is not allow because it is up to 255 chars"
										},
										{
											"key": "lastName",
											"value": null
										},
										{
											"key": "email",
											"value": "not an email"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"email\": \"not an email\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"email\": \"not an email\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Found Cases",
					"item": [
						{
							"name": "delete - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "update - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get all - empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const borrowers = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no borrowers yet\", () => {",
									"    pm.expect(borrowers).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const BASE_URL = pm.collectionVariables.get(\"base_url\");\r",
									"const deleteAll = async (path, after = () => {}) => {\r",
									"    const url = `${BASE_URL}${path}`\r",
									"    pm.sendRequest(url, (error, response) => {\r",
									"    if (error) return console.log(error)\r",
									"    const body = response.json().data;\r",
									"    const {length} = body;\r",
									"    if (length === 0) return after();\r",
									"    let count = 0;\r",
									"    body.forEach(async item => \r",
									"        pm.sendRequest({\r",
									"        url: `${url}/${item.id}`,\r",
									"        method: 'DELETE',\r",
									"        headers: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }}, (error) => {\r",
									"            if (error) return console.log(error)\r",
									"            console.log(\"deleted \" + item.id)\r",
									"            count++;\r",
									"            if (count === length) after();\r",
									"        }))})};\r",
									"\r",
									"deleteAll(\"/transactions\", () =>  deleteAll(\"/\" + pm.collectionVariables.get(\"table\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "publicationYear",
									"value": "1800",
									"disabled": true
								},
								{
									"key": "title",
									"value": "some title",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "isbn",
									"value": "123412341234",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"borrowerId\", body.id);",
									"pm.collectionVariables.set(\"lastEmail\", body.email);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in body) {",
									"        if (key === \"id\") continue;",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");\r",
									"const email = pm.collectionVariables.get(\"lastEmail\")\r",
									"\r",
									"pm.test(\"should receive a borrower with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", borrowerId);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"should receive a borrower correct email\", () => {\r",
									"    pm.expect(body).to.have.property(\"email\", email);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{borrowerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{borrowerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = JSON.parse(responseBody).data[0];",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");",
									"const email = pm.collectionVariables.get(\"lastEmail\")",
									"",
									"pm.test(\"should receive a borrower with expected id\", () => {",
									"    pm.expect(body).to.have.property(\"id\", borrowerId);",
									"}) ;",
									"",
									"pm.test(\"should receive a borrower correct email\", () => {",
									"    pm.expect(body).to.have.property(\"email\", email);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?email={{lastEmail}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "email",
									"value": "{{lastEmail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const borrowers = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have only 1 borrower\", () => {",
									"    pm.expect(borrowers).to.have.length(1, \"expected length 1\");",
									"})",
									"",
									"pm.test(\"should have 1 borrower with expected id\", () => {",
									"    const borrower = borrowers[0];",
									"    pm.expect(borrower.id).to.eql(pm.collectionVariables.get(\"borrowerId\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update - first",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = JSON.parse(responseBody).data[0];\r",
									"const reqBody = JSON.parse(pm.request.body.raw);\r",
									"const id = pm.collectionVariables.get(\"borrowerId\");\r",
									"\r",
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"should have expected id\", () => {\r",
									"    const resId = resBody.id;\r",
									"    pm.expect(+resId).to.equal(+id);\r",
									"})\r",
									"\r",
									"const lastEmail = pm.collectionVariables.get(\"lastEmail\");\r",
									"\r",
									"pm.test(\"should have changed as expected\", () => {\r",
									"    pm.expect(resBody).not.to.have.property(\"email\", lastEmail);\r",
									"    pm.expect(resBody).to.have.property(\"email\",\"nuevomail@gmail.com\" );\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"lastEmail\", resBody.email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nuevomail@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}/{{borrowerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{borrowerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");\r",
									"\r",
									"pm.test(\"should receive a borrower with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", borrowerId);\r",
									"}) ;\r",
									"\r",
									"const lastEmail = pm.collectionVariables.get(\"lastEmail\");\r",
									"\r",
									"pm.test(\"should receive a borrower correct year\", () => {\r",
									"    pm.expect(body).to.have.property(\"email\", lastEmail);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{borrowerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{borrowerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{borrowerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{borrowerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should not be ok\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{borrowerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{borrowerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - empty Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const borrowers = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no borrowers yet\", () => {",
									"    pm.expect(borrowers).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create -random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"lastName\", \"SameLastName\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same last name 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})",
									"",
									"pm.collectionVariables.set(\"borrowerId\", body.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all  - many",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const borrowers = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have 3 borrowers\", () => {",
									"    pm.expect(borrowers).to.have.length(3, \"expected length 3\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - same title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const borrowers = JSON.parse(responseBody).data;",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");",
									"const lastName = pm.collectionVariables.get(\"lastName\");",
									"",
									"pm.test(\"should have length 2\", () => {",
									"    pm.expect(borrowers).to.have.length(2);",
									"}) ;",
									"",
									"pm.test(\"should receive a borrower correct lastName\", () => {",
									"    borrowers.forEach(borrower => {",
									"        pm.expect(borrower).to.have.property(\"lastName\", lastName);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?lastName={{lastName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "lastName",
									"value": "{{lastName}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"table\", \"borrowers\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Exemplars",
			"item": [
				{
					"name": "Invalid Cases",
					"item": [
						{
							"name": "get by id - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by query - invalid query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}?bookId=not a number&status=not an status",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "bookId",
											"value": "not a number"
										},
										{
											"key": "status",
											"value": "not an status"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookId\": \"not an id\",\n    \"status\": \"not a status\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookId\": \"not an id\",\n    \"status\": \"not a status\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"Available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Found Cases",
					"item": [
						{
							"name": "delete - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "create - no book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"status\", [\"Available\", \"Borrowerd\"][Math.floor(_.random() * 2)])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookId\": 9999999,\n    \"status\": \"{{status}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get all - empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const exemplars = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no exemplars yet\", () => {",
									"    pm.expect(exemplars).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const BASE_URL = pm.collectionVariables.get(\"base_url\");\r",
									"const deleteAll = async (path, after = () => {}) => {\r",
									"    const url = `${BASE_URL}${path}`\r",
									"    pm.sendRequest(url, (error, response) => {\r",
									"    if (error) return console.log(error)\r",
									"    const body = response.json().data;\r",
									"    const {length} = body;\r",
									"    if (length === 0) return after();\r",
									"    let count = 0;\r",
									"    body.forEach(async item => \r",
									"        pm.sendRequest({\r",
									"        url: `${url}/${item.id}`,\r",
									"        method: 'DELETE',\r",
									"        headers: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }}, (error) => {\r",
									"            if (error) return console.log(error)\r",
									"            console.log(\"deleted \" + item.id)\r",
									"            count++;\r",
									"            if (count === length) after();\r",
									"        }))})};\r",
									"\r",
									"deleteAll(\"/transactions\", () =>  deleteAll(\"/\" + pm.collectionVariables.get(\"table\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"exemplarId\", body.id);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"status\", [\"Available\", \"Borrowed\"][_.random(0,1)])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookId}},\n    \"status\": \"{{status}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");\r",
									"const status = pm.collectionVariables.get(\"status\")\r",
									"\r",
									"pm.test(\"should receive a exemplar with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", exemplarId);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"should receive a exemplar correct status\", () => {\r",
									"    pm.expect(body).to.have.property(\"status\", status);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{exemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{exemplarId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = JSON.parse(responseBody).data[0];",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");",
									"const status = pm.collectionVariables.get(\"status\")",
									"",
									"pm.test(\"should receive a exemplar with expected id\", () => {",
									"    pm.expect(body).to.have.property(\"id\", exemplarId);",
									"}) ;",
									"",
									"pm.test(\"should receive a exemplar correct status\", () => {",
									"    pm.expect(body).to.have.property(\"status\", status);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?status={{status}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{status}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const exemplars = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have only 1 exemplar\", () => {",
									"    pm.expect(exemplars).to.have.length(1, \"expected length 1\");",
									"})",
									"",
									"pm.test(\"should have 1 exemplar with expected id\", () => {",
									"    const exemplar = exemplars[0];",
									"    pm.expect(exemplar.id).to.eql(pm.collectionVariables.get(\"exemplarId\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update - first",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentStatus = pm.collectionVariables.get(\"status\");\r",
									"\r",
									"const statuses = [\"Available\", \"Borrowed\"];\r",
									"\r",
									"const index = statuses.indexOf(currentStatus);\r",
									"\r",
									"pm.collectionVariables.set(\"status\", statuses[(index + 1) % statuses.length])"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = JSON.parse(responseBody).data[0];\r",
									"const reqBody = JSON.parse(pm.request.body.raw);\r",
									"const id = pm.collectionVariables.get(\"exemplarId\");\r",
									"\r",
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"should have expected id\", () => {\r",
									"    const resId = resBody.id;\r",
									"    pm.expect(+resId).to.equal(+id);\r",
									"})\r",
									"\r",
									"const status = pm.collectionVariables.get(\"status\");\r",
									"\r",
									"pm.test(\"should have changed as expected\", () => {\r",
									"    const resBodyWithId = {...resBody, id};\r",
									"    pm.expect(resBodyWithId).not.to.equal(reqBody);\r",
									"    pm.expect(resBody.status).to.eql(reqBody.status);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"{{status}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}/{{exemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{exemplarId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");\r",
									"\r",
									"pm.test(\"should receive a exemplar with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", exemplarId);\r",
									"}) ;\r",
									"\r",
									"const status = pm.collectionVariables.get(\"status\");\r",
									"\r",
									"pm.test(\"should receive a exemplar correct status\", () => {\r",
									"    pm.expect(body).to.have.property(\"status\", status);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{exemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{exemplarId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{exemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{exemplarId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should not be ok\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{exemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{exemplarId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - empty Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const exemplars = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no exemplars yet\", () => {",
									"    pm.expect(exemplars).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create -random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookId}},\n    \"status\": \"Available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookId}},\n    \"status\": \"Borrowed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"})",
									"",
									"pm.collectionVariables.set(\"exemplarId\", body.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": {{bookId}},\n    \"status\": \"Borrowed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all  - many",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const exemplars = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have 3 exemplars\", () => {",
									"    pm.expect(exemplars).to.have.length(3, \"expected length 3\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - same title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const exemplars = JSON.parse(responseBody).data;",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");",
									"",
									"pm.test(\"should have length 2\", () => {",
									"    pm.expect(exemplars).to.have.length(2);",
									"}) ;",
									"",
									"pm.test(\"should receive a exemplar correct year\", () => {",
									"    exemplars.forEach(exemplar => {",
									"        pm.expect(exemplar).to.have.property(\"status\", \"Borrowed\");",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?status=Borrowed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "status",
									"value": "Borrowed"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"table\", \"exemplars\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Invalid Cases",
					"item": [
						{
							"name": "get by id - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by query - invalid query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}?borrowedAt=not a date&returnedAt=123123&dueToDate=13-13-13",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									],
									"query": [
										{
											"key": "borrowedAt",
											"value": "not a date"
										},
										{
											"key": "returnedAt",
											"value": "123123"
										},
										{
											"key": "dueToDate",
											"value": "13-13-13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"borrowerId\": \"not an id\",\n    \"exemplarId\": \"not an id either\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"borrowerId\": \"not an id\",\n    \"exemplarId\": \"not an id either\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"Available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete - invalid param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/ngfhngf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"ngfhngf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Found Cases",
					"item": [
						{
							"name": "delete - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "create - no exemplar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"exemplarId\": 9999999,\n    \"borrowerId\": {{borrowerId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create - no borrower",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);",
											"",
											"pm.test(\"should be error\", () => {",
											"    pm.response.to.be.error;",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"exemplarId\": {{exemplarId}},\n    \"borrowerId\": 99999\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"should be error\", () => {\r",
											"    pm.response.to.be.error;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/99999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"99999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get all - empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const exemplars = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no exemplars yet\", () => {",
									"    pm.expect(exemplars).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const BASE_URL = pm.collectionVariables.get(\"base_url\");\r",
									"const deleteAll = async (path, after = () => {}) => {\r",
									"    const url = `${BASE_URL}${path}`\r",
									"    pm.sendRequest(url, (error, response) => {\r",
									"    if (error) return console.log(error)\r",
									"    const body = response.json().data;\r",
									"    const {length} = body;\r",
									"    if (length === 0) return after();\r",
									"    let count = 0;\r",
									"    body.forEach(async item => \r",
									"        pm.sendRequest({\r",
									"        url: `${url}/${item.id}`,\r",
									"        method: 'DELETE',\r",
									"        headers: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }}, (error) => {\r",
									"            if (error) return console.log(error)\r",
									"            console.log(\"deleted \" + item.id)\r",
									"            count++;\r",
									"            if (count === length) after();\r",
									"        }))})};\r",
									"\r",
									"deleteAll(\"/\" + pm.collectionVariables.get(\"table\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "publicationYear",
									"value": "1800",
									"disabled": true
								},
								{
									"key": "title",
									"value": "some title",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Keaton Reinger",
									"disabled": true
								},
								{
									"key": "isbn",
									"value": "123412341234",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"transactionId\", body.id);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"    pm.expect(body).to.have.property(\"borrowedAt\");",
									"    pm.expect(body).to.have.property(\"dueToDate\");",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exemplarId\": {{exemplarId}},\n    \"borrowerId\": {{borrowerId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");\r",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");\r",
									"\r",
									"pm.test(\"should receive a transaction with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", transactionId);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"should receive a exemplar correct body\", () => {\r",
									"    pm.expect(body).to.have.property(\"exemplarId\", exemplarId);\r",
									"    pm.expect(body).to.have.property(\"borrowerId\", borrowerId);\r",
									"    pm.expect(body).to.have.property(\"borrowedAt\");\r",
									"    pm.expect(body).to.have.property(\"dueToDate\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{transactionId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const transactionId = pm.collectionVariables.get(\"transactionId\");",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");",
									"const body = JSON.parse(responseBody).data[0];",
									"",
									"pm.test(\"should receive a transaction with expected id\", () => {",
									"    pm.expect(body).to.have.property(\"id\", transactionId);",
									"}) ;",
									"",
									"pm.test(\"should receive a exemplar correct body\", () => {",
									"    pm.expect(body).to.have.property(\"exemplarId\", exemplarId);",
									"    pm.expect(body).to.have.property(\"borrowerId\", borrowerId);",
									"    pm.expect(body).to.have.property(\"borrowedAt\");",
									"    pm.expect(body).to.have.property(\"dueToDate\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?exemplarId={{exemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "exemplarId",
									"value": "{{exemplarId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const transactions = body.data;",
									"const transactionId = pm.collectionVariables.get(\"transactionId\");",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have only 1 transaction\", () => {",
									"    pm.expect(transactions).to.have.length(1, \"expected length 1\");",
									"})",
									"",
									"pm.test(\"should have 1 transaction with expected id\", () => {",
									"    const transaction = transactions[0];",
									"    pm.expect(transaction).to.have.property(\"id\", transactionId);",
									"    pm.expect(transaction).to.have.property(\"exemplarId\", exemplarId);",
									"    pm.expect(transaction).to.have.property(\"borrowerId\", borrowerId);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update - first",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"returnedAt\", new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = JSON.parse(responseBody).data[0];\r",
									"const reqBody = JSON.parse(pm.request.body.raw);\r",
									"const id = pm.collectionVariables.get(\"transactionId\");\r",
									"\r",
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test(\"should have expected id\", () => {\r",
									"    const resId = resBody.id;\r",
									"    pm.expect(+resId).to.equal(+id);\r",
									"})\r",
									"\r",
									"const returnedAt = pm.collectionVariables.get(\"returnedAt\");\r",
									"\r",
									"pm.test(\"should have changed as expected\", () => {\r",
									"    const resBodyWithId = {...resBody, id};\r",
									"    pm.expect(resBodyWithId).not.to.equal(reqBody);\r",
									"    pm.expect(resBody).to.have.property(\"returnedAt\", reqBody.returnedAt);\r",
									"    pm.expect(resBody).to.have.property(\"returnedAt\", returnedAt);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"returnedAt\": \"{{returnedAt}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}/{{transactionId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(responseBody).data[0];\r",
									"const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
									"\r",
									"pm.test(\"should receive a transaction with expected id\", () => {\r",
									"    pm.expect(body).to.have.property(\"id\", transactionId);\r",
									"}) ;\r",
									"\r",
									"const returnedAt = pm.collectionVariables.get(\"returnedAt\");\r",
									"const exemplarId = pm.collectionVariables.get(\"exemplarId\");\r",
									"const borrowerId = pm.collectionVariables.get(\"borrowerId\");\r",
									"\r",
									"pm.test(\"should receive a exemplar correct body\", () => {\r",
									"    pm.expect(body).to.have.property(\"exemplarId\", exemplarId);\r",
									"    pm.expect(body).to.have.property(\"borrowerId\", borrowerId);\r",
									"    pm.expect(body).to.have.property(\"borrowedAt\");\r",
									"    pm.expect(body).to.have.property(\"dueToDate\");\r",
									"    pm.expect(body).to.have.property(\"returnedAt\", returnedAt);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{transactionId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete - first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should be ok\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{transactionId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by id - deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should not be ok\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}/{{transactionId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all - empty Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const transactions = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have no transactions\", () => {",
									"    pm.expect(transactions).to.have.length(0, \"expected length 0\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create - random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"transactionId\", body.id);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"    pm.expect(body).to.have.property(\"borrowedAt\");",
									"    pm.expect(body).to.have.property(\"dueToDate\");",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exemplarId\": {{exemplarId}},\n    \"borrowerId\": {{borrowerId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same exemplar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"transactionId\", body.id);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"    pm.expect(body).to.have.property(\"borrowedAt\");",
									"    pm.expect(body).to.have.property(\"dueToDate\");",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let exemplarId = pm.collectionVariables.get(\"exemplarId\");\r",
									"pm.collectionVariables.set(\"prevExemplarId\", --exemplarId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exemplarId\": {{prevExemplarId}},\n    \"borrowerId\": {{borrowerId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create - same exemplar 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody).data[0];",
									"const reqBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"transactionId\", body.id);",
									"",
									"pm.test(\"should have status code 201\", () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"should have been created with the same properties\", () => {",
									"    for (const key in reqBody) {",
									"        pm.expect(body).to.have.property(key, reqBody[key]);",
									"    }",
									"    pm.expect(body).to.have.property(\"borrowedAt\");",
									"    pm.expect(body).to.have.property(\"dueToDate\");",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exemplarId\": {{prevExemplarId}},\n    \"borrowerId\": {{borrowerId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all  - many",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = JSON.parse(responseBody);",
									"",
									"const transactions = body.data;",
									"",
									"pm.test(\"should have status code 200\", function () {",
									"    pm.response.to.have.status(200, \"expected code 200\");",
									"});",
									"",
									"pm.test(\"should have 3 transactions\", () => {",
									"    pm.expect(transactions).to.have.length(3, \"expected length 3\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by query - same exemplar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const transactions = JSON.parse(responseBody).data;",
									"",
									"pm.test(\"should have length 2\", () => {",
									"    pm.expect(transactions).to.have.length(2);",
									"}) ;",
									"",
									"const exemplarId = pm.collectionVariables.get(\"prevExemplarId\");",
									"",
									"pm.test(\"should receive a transaction correct exemplar id\", () => {",
									"    transactions.forEach(transaction => {",
									"        pm.expect(transaction).to.have.property(\"exemplarId\", +exemplarId);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{table}}?exemplarId={{prevExemplarId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{table}}"
							],
							"query": [
								{
									"key": "exemplarId",
									"value": "{{prevExemplarId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"table\", \"transactions\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Books",
					"item": [
						{
							"name": "get all - book reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"should have a status code of 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const books = JSON.parse(responseBody).data;\r",
											"\r",
											"pm.test(\"should have 3 books in body\", () => {\r",
											"    pm.expect(books).to.have.length(3);\r",
											"})\r",
											"\r",
											"const bookId = pm.collectionVariables.get(\"bookId\");\r",
											"\r",
											"pm.test(\"should have a previous created book\", () => {\r",
											"    const book = books.find(({id}) => id === bookId);\r",
											"    pm.expect(book).not.to.be.null;\r",
											"    pm.expect(book).to.have.property(\"id\", bookId);\r",
											"    pm.expect(book).to.have.property(\"totalExemplars\", 3);\r",
											"})\r",
											"\r",
											"pm.test(\"should have expected structure\", () => {\r",
											"    books.forEach(book => {\r",
											"        pm.expect(book).to.have.property(\"id\");\r",
											"        pm.expect(book).to.have.property(\"isbn\");\r",
											"        pm.expect(book).to.have.property(\"title\");\r",
											"        pm.expect(book).to.have.property(\"author\");\r",
											"        pm.expect(book).to.have.property(\"publicationYear\");\r",
											"        pm.expect(book).to.have.property(\"totalExemplars\");\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/books",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"books"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Available",
					"item": [
						{
							"name": "get all - available reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"should have a status code of 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const books = JSON.parse(responseBody).data;\r",
											"\r",
											"pm.test(\"should have 1 book in total\", () => {\r",
											"    pm.expect(books).to.have.length(1);\r",
											"})\r",
											"\r",
											"const bookId = pm.collectionVariables.get(\"bookId\");\r",
											"\r",
											"pm.test(\"should have a previous created book\", () => {\r",
											"    const book = books.find(({id}) => id == bookId);\r",
											"    console.log(book);\r",
											"    pm.expect(book).not.to.be.null;\r",
											"    pm.expect(book).to.have.property(\"id\", +bookId);\r",
											"    const {exemplarsIds} = book;\r",
											"    // This available book currently only have 1 available book\r",
											"    pm.expect(exemplarsIds).to.have.length(1);\r",
											"})\r",
											"\r",
											"pm.test(\"should have expected structure\", () => {\r",
											"    books.forEach(book => {\r",
											"        pm.expect(book).to.have.property(\"id\");\r",
											"        pm.expect(book).to.have.property(\"isbn\");\r",
											"        pm.expect(book).to.have.property(\"title\");\r",
											"        pm.expect(book).to.have.property(\"author\");\r",
											"        pm.expect(book).to.have.property(\"publicationYear\");\r",
											"        pm.expect(book).to.have.property(\"exemplarsIds\");\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"available"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Borrowers",
					"item": [
						{
							"name": "get all - borrower reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"should have a status code of 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const borrowers = JSON.parse(responseBody).data;\r",
											"\r",
											"pm.test(\"should have 3 borrowers\", () => {\r",
											"    pm.expect(borrowers).to.have.length(3);\r",
											"})\r",
											"\r",
											"const borrowerId = pm.collectionVariables.get(\"borrowerId\"); \r",
											"\r",
											"pm.test(\"should have a previous created borrower\", () => {\r",
											"    const borrower = borrowers.find(({id}) => id === borrowerId);\r",
											"    pm.expect(borrower).not.to.be.null;\r",
											"    pm.expect(borrower).to.have.property(\"id\", borrowerId);\r",
											"    const {transactions} = borrower;\r",
											"    // This borrower has 3 transaction\r",
											"    pm.expect(transactions).to.have.length(3);\r",
											"})\r",
											"\r",
											"pm.test(\"should have expected structure\", () => {\r",
											"    borrowers.forEach(borrower => {\r",
											"        pm.expect(borrower).to.have.property(\"id\");\r",
											"        pm.expect(borrower).to.have.property(\"firstName\");\r",
											"        pm.expect(borrower).to.have.property(\"lastName\");\r",
											"        pm.expect(borrower).to.have.property(\"email\");\r",
											"        pm.expect(borrower).to.have.property(\"transactions\");\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/borrowers",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"borrowers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Overdue",
					"item": [
						{
							"name": "get all - overdue reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"should have a status code of 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"const overdues = JSON.parse(responseBody).data;\r",
											"\r",
											"pm.test(\"should have expected quantity of overdues\", () => {\r",
											"    pm.expect(overdues).to.have.length(0);\r",
											"})\r",
											"\r",
											"pm.test(\"should have expected structure\", () => {\r",
											"    overdues.forEach(overdue => {\r",
											"        pm.expect(overdue).to.have.property(\"borrower\");\r",
											"        pm.expect(overdue).to.have.property(\"exemplar\");\r",
											"        pm.expect(overdue).to.have.property(\"borrowedAt\");\r",
											"        pm.expect(overdue).to.have.property(\"dueToDate\");\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{table}}/overdue",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{table}}",
										"overdue"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"table\", \"reports\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:4000/api/v1",
			"type": "string"
		},
		{
			"key": "bookId",
			"value": ""
		},
		{
			"key": "randomISBN",
			"value": ""
		},
		{
			"key": "randomYear",
			"value": ""
		},
		{
			"key": "borrowerId",
			"value": ""
		},
		{
			"key": "exemplarId",
			"value": ""
		},
		{
			"key": "dueToDate",
			"value": ""
		},
		{
			"key": "transactionId",
			"value": ""
		},
		{
			"key": "lastId",
			"value": "",
			"type": "string"
		},
		{
			"key": "table",
			"value": "",
			"type": "string"
		},
		{
			"key": "lastEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "status",
			"value": "",
			"type": "string"
		},
		{
			"key": "returnedAt",
			"value": "",
			"type": "string"
		},
		{
			"key": "prevExemplarId",
			"value": "",
			"type": "string"
		},
		{
			"key": "lastName",
			"value": "",
			"type": "string"
		}
	]
}